*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="gf_objectexplorer.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS frmexplorer AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Treecontainer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getsavedproperty
		*m: navigatetoobject
		*m: opensettingsfile
		*m: readsavedsettings
		*m: resizecontrols
		*m: saveproperty
		*m: savesettings
		*m: setdatasession
		*p: cdefaultfavorites
		*p: cformname
		*p: cpublicvariable
		*p: csettingsfilename
		*p: nmaxtreeviewwidth
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		AllowOutput = .F.
		Caption = "Explorer"
		cdefaultfavorites = caption, controlsource, recordsource, baseclass, class, classlibrary, parentclass, top, left, width, height, text, value, enabled, visible, rowsource, rowsourcetype, datasessionid
		cformname = 
		cpublicvariable = 
		csettingsfilename = (Addbs(Home(7)) + 'ObjectExplorerSettings.dbf')
		DataSession = 2
		DoCreate = .T.
		Height = 623
		KeyPreview = .T.
		Left = 0
		Name = "frmexplorer"
		nmaxtreeviewwidth = 400
		ShowWindow = 2
		Top = 0
		Visible = .T.
		Width = 623
		_memberdata = <VFPData>
			<memberdata name="navigatetoobject" display="NavigateToObject"/>
			<memberdata name="getsavedproperty" display="GetSavedProperty"/>
			<memberdata name="opensettingsfile" display="OpenSettingsFile"/>
			<memberdata name="readsavedsettings" display="ReadSavedSettings"/>
			<memberdata name="resizecontrols" display="ResizeControls"/>
			<memberdata name="saveproperty" display="SaveProperty"/>
			<memberdata name="savesettings" display="SaveSettings"/>
			<memberdata name="setdatasession" display="SetDataSession"/>
			<memberdata name="csettingsfilename" display="cSettingsFileName" favorites="True"/>
			<memberdata name="nmaxtreeviewwidth" display="nMaxTreeViewWidth" favorites="True"/>
			<memberdata name="cformname" display="cFormName"/>
			<memberdata name="cdefaultfavorites" display="cDefaultFavorites"/>
			<memberdata name="cpublicvariable" display="cPublicVariable"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdExit' AS commandbutton WITH ;
		Anchor = 0, ;
		AutoSize = .F., ;
		Cancel = .T., ;
		Caption = "Exit", ;
		Height = 27, ;
		Left = 108, ;
		Name = "cmdExit", ;
		ToolTipText = "Save the current list of fields selection from this table (for use next time).", ;
		Top = 546, ;
		Visible = .F., ;
		Width = 66
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Treecontainer' AS treecontainer WITH ;
		Name = "Treecontainer", ;
		Top = 0, ;
		oleTree.Height = 586, ;
		oleTree.Left = 8, ;
		oleTree.Name = "oleTree", ;
		oleTree.Top = 8, ;
		oleTree.Width = 199, ;
		txtFullPath.Name = "txtFullPath", ;
		oPropGrid.Name = "oPropGrid", ;
		Label1.Alignment = 1, ;
		Label1.Anchor = 14, ;
		Label1.Height = 16, ;
		Label1.Left = 451, ;
		Label1.Name = "Label1", ;
		Label1.Top = 603, ;
		Label1.Width = 166, ;
		cntCheckBoxes.chklShowCustom.Alignment = 0, ;
		cntCheckBoxes.chklShowCustom.Name = "chklShowCustom", ;
		cntCheckBoxes.chklShowInherited.Alignment = 0, ;
		cntCheckBoxes.chklShowInherited.Name = "chklShowInherited", ;
		cntCheckBoxes.chklShowNative.Alignment = 0, ;
		cntCheckBoxes.chklShowNative.Name = "chklShowNative", ;
		cntCheckBoxes.chklShowNonDefault.Alignment = 0, ;
		cntCheckBoxes.chklShowNonDefault.Name = "chklShowNonDefault", ;
		cntCheckBoxes.lblFilter.Name = "lblFilter", ;
		cntCheckBoxes.Name = "cntCheckBoxes", ;
		cntCheckBoxes.txtFilter.Name = "txtFilter", ;
		cmdBrowse.Name = "cmdBrowse", ;
		chklSortFavorites.Alignment = 0, ;
		chklSortFavorites.Name = "chklSortFavorites", ;
		chklHighlightFavorites.Alignment = 0, ;
		chklHighlightFavorites.Name = "chklHighlightFavorites"
		*< END OBJECT: ClassLib="gf_objectexplorer.vcx" BaseClass="container" />
	
	PROCEDURE Destroy
		Local lcPublicVariable, lcPublicVariables, lnI, loException
		
		This.SaveSettings()
		
		* Release any public variables created
		lcPublicVariables = Evl(This.cPublicVariable, '')
		For lnI = 1 To Getwordcount(m.lcPublicVariables)
			lcPublicVariable = Trim(Getwordnum(m.lcPublicVariables, m.lnI))
			Try
				Release  &lcPublicVariable
			Catch To m.loException
		
			Endtry
		Endfor
		
	ENDPROC

	PROCEDURE getsavedproperty
		Lparameters lcProperty, lxDefault, lnType
		
		Local lcFilter
		
		lcFilter = Textmerge('Type = <<Evl(m.lnType, 0)>>')
		Set Filter To &lcFilter In SettingsFile
		
		If Seek(Upper(m.lcProperty), 'SettingsFile')
			Do Case
				Case Vartype(m.lxDefault) = 'N'
					Return SettingsFile.NumValue
				Case Vartype(m.lxDefault) = 'L'
					Return SettingsFile.BitValue
				Otherwise
					Return .Null.
			Endcase
		Else
			Return m.lxDefault
		Endif
		
	ENDPROC

	PROCEDURE Init
		Lparameters toObject, tcObjectName, tcFormCaptionSuffix, tcPublicVariable
		
		*** DH 2022-04-03: handle llExplore
		Local lcRelative, llFailed, llHasParent, loException, loNewParent, loParent, llExplore
		
		This.OpenSettingsFile()
		
		This.ReadSavedSettings()
		
		loParent = m.toObject
		*** JRN 2022-11-17 : Nothing to do if no object passed in
		If Vartype(loParent) # 'O'
			Return .F.
		EndIf 
		
		This.cPublicVariable = tcPublicVariable
		
		Do While Pemstatus(m.loParent, 'Parent', 5) And m.llFailed = .F.
			Try
				loNewParent	= m.loParent.Parent
				If Upper(m.loNewParent.Class) # 'FORMSET'
					loParent	= m.loNewParent
					llHasParent	= .T.
				Else
					llFailed = .T.
				Endif
			Catch
				llFailed = .T.
			Endtry
		Enddo
		
		If m.llHasParent
		*** DH 2022-04-03: get return value from Explore method
			llExplore = This.Treecontainer.Explore(m.loParent, m.tcObjectName)
			This.NavigateToObject(m.toObject)
		Else
		*** DH 2022-04-03: get return value from Explore method
			llExplore = This.Treecontainer.Explore(m.toObject, m.tcObjectName)
		Endif
		*** DH 2022-04-03: check for Explorer failing
		if not llExplore
			return .F.
		endif not llExplore
		*** DH 2022-04-03: end of new code
		
		If Not Empty(m.tcFormCaptionSuffix)
			This.Caption = This.Caption + ': ' + m.tcFormCaptionSuffix
		Else
			Try
				This.cFormName = Sys(1271, m.loParent)
				lcRelative	   = Sys(2014, This.cFormName)
				This.Caption   = This.Caption + ': "' + m.lcRelative + '" (' + m.loParent.Caption + ')'
			Catch To m.loException
				This.Caption = This.Caption + ': ' + This.Treecontainer.oleTree.Nodes[1].Text
		
			Endtry
		Endif
		
		This.ReadSavedSettings() && yup, again! .. don't ask
		
		This.ResizeControls()
		
	ENDPROC

	PROCEDURE KeyPress
		Lparameters nKeyCode, nShiftAltCtrl
		Do Case
			Case m.nKeyCode = 27
				This.Release()
		Endcase
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off
		
	ENDPROC

	PROCEDURE navigatetoobject
		Lparameters toObject
		
		This.Treecontainer.NavigateToObject(toObject)
	ENDPROC

	PROCEDURE opensettingsfile
		Local laFavorites[1], laTagIngo[1], lcFileName, lnCount, lnI, loException
		
		If Used('SettingsFile')
			Return
		Endif
		
		lcFileName = This.cSettingsFileName
		
		*** JRN 2022-11-23 : create file if it doesn't exist
		Select 0
		If Not File(m.lcFileName)
			Create Table (m.lcFileName)  (Property C(40), NumValue N(10), BitValue L, Type I)
			Index On Upper(Property) Tag Property
		Endif
		
		*** JRN 2022-11-23 : Set order to tag Property (and create if tag does not exist)
		Try
			Use (m.lcFileName) Alias SettingsFile Again Shared Order Property
		Catch To m.loException
			Use (m.lcFileName) Exclusive
			Index On Upper(Property) Tag Property
			Use (m.lcFileName) Alias SettingsFile Again Shared Order Property
		Endtry
		
		*** JRN 2022-11-23 : Add new field 'Type' if it does not exist
		If Empty(Field('Type', 'SettingsFile'))
			Use (m.lcFileName) Alias SettingsFile Exclusive
			Alter Table SettingsFile Add Column Type I
			Use (m.lcFileName) Alias SettingsFile Again Shared Order Property
		Endif
		
		*** JRN 2022-11-23 : Add default favorites (first time only)
		Locate For Type = 1
		If Not Found()
			lnCount = Alines(laFavorites, Upper(This.cDefaultFavorites), 1, ' ', ',', Chr[13], Chr[10], Chr[9])
			For lnI = 1 To m.lnCount
				This.SaveProperty(m.laFavorites[m.lnI], .T., 1)
			Endfor
		Endif
		
		
	ENDPROC

	PROCEDURE readsavedsettings
		With This
			.Top	= .GetSavedProperty('Top', 	  .Top)
			.Left	= .GetSavedProperty('Left',   .Left)
			.Width	= .GetSavedProperty('Width',  .Width)
			.Height	= .GetSavedProperty('Height', .Height)
		
		*** DH 2022-03-03: ensure the form is visible
			local lnBottom, ;
				lnRight
			lnBottom = .Top  + .Height
			lnRight  = .Left + .Width
			do case
				case .ShowWindow = 2 or .Desktop
				case .ShowWindow = 0 and (not between(lnBottom, .Height, _screen.Height) or ;
					not between(lnRight, .Width, _screen.Width))
					store 0 to .Top, .Left
				case .ShowWindow = 1 and (type('_screen.ActiveForm') = 'O' and ;
					(not between(lnBottom, .Height, _screen.ActiveForm.Height) or ;
					not between(lnRight, .Width, _screen.ActiveForm.Width)) or ;
					not between(lnBottom, .Height, _screen.Height) or ;
					not between(lnRight, .Width, _screen.Width))
					store 0 to .Top, .Left
			endcase
		*** DH 2022-03-03: end of new code
		
			.Treecontainer.lShowNative	   = .GetSavedProperty('ShowNative',     .T.)
			.Treecontainer.lShowInherited  = .GetSavedProperty('ShowInherited',  .T.)
			.Treecontainer.lShowCustom	   = .GetSavedProperty('ShowCustom',     .T.)
			.Treecontainer.lShowNonDefault = .GetSavedProperty('ShowNonDefault', .F.)
			.Treecontainer.lSortFavorites  = .GetSavedProperty('SortFavorites',  .F.)
			.Treecontainer.lHighlightFavorites = .GetSavedProperty('HighlightFavorites',  .F.)
			.Treecontainer.nMaxCharacterWidth  = .GetSavedProperty('MaxCharacterWidth', 400)
			
			.TreeContainer.opropGrid.Column1.Width = .GetSavedProperty('Column1.Width', 150)
			.TreeContainer.opropGrid.Column2.Width = .GetSavedProperty('Column2.Width', 32)
			.TreeContainer.opropGrid.Column3.Width = .GetSavedProperty('Column3.Width', 500)
		
		Endwith
		
	ENDPROC

	PROCEDURE Refresh
		This.ResizeControls()
		
	ENDPROC

	PROCEDURE Resize
		This.ResizeControls()
		
	ENDPROC

	PROCEDURE resizecontrols
		Local lnTreeRight, lnTreeWidth, loTreecontainer
		
		lnTreeWidth = Min(Thisform.nMaxTreeViewWidth, This.Width / 3)
		
		If lnTreeWidth # 0
		
			loTreecontainer = This.Treecontainer
			With m.loTreecontainer.oleTree
				.Anchor		= 0
				.Left		= 4
				.Width		= lnTreeWidth 
				.Anchor		= 7
				lnTreeRight	= .Left + .Width
			Endwith
		
			With m.loTreecontainer.oPropGrid
				.Anchor	= 0
				.Left	= m.lnTreeRight + 10
				.Width	= m.loTreecontainer.Width - .Left - 4
				.Anchor	= 15
		
				.Column3.Width = Max(40, .Width - (.Column1.Width + .Column2.Width) - 30)
				.Column4.Width = 0
				
				m.loTreecontainer.nMaxCharacterWidth = (.Column3.Width - 40) / 6.5
				
			Endwith
		
			With m.loTreecontainer.cntCheckBoxes
				.Anchor	= 0
				.Left	= m.loTreecontainer.oPropGrid.Left	
				lnLeft = .Left	
			EndWith
		
			With m.loTreecontainer.txtFullPath
				.Anchor	= 0
				.Left	= m.loTreecontainer.oPropGrid.Left	
				lnLeft = .Left	
				.Anchor = 14
			EndWith
		
		Endif
		
	ENDPROC

	PROCEDURE saveproperty
		Lparameters lcProperty, lxValue, lnType
		
		Local lcFilter
		
		lcFilter = Textmerge('Type = <<Evl(m.lnType, 0)>>')
		Set Filter To &lcFilter In SettingsFile
		If Seek(Upper(m.lcProperty), 'SettingsFile')
			Do Case
				Case Vartype(m.lxValue) = 'N'
					Replace NumValue With m.lxValue In SettingsFile
				Case Vartype(m.lxValue) = 'L'
					Replace BitValue With m.lxValue In SettingsFile
			Endcase
		Else
			Do Case
				Case Vartype(m.lxValue) = 'N'
					Insert Into SettingsFile (Property, NumValue, Type) Values (m.lcProperty, m.lxValue, Evl(m.lnType, 0))
				Case Vartype(m.lxValue) = 'L'
					Insert Into SettingsFile (Property, BitValue, Type) Values (m.lcProperty, m.lxValue, Evl(m.lnType, 0))
			Endcase
		Endif
		
	ENDPROC

	PROCEDURE savesettings
		With This
			Select SettingsFile
			.SaveProperty('Top',    .Top)
			.SaveProperty('Left',   .Left)
			.SaveProperty('Width',  .Width)
			.SaveProperty('Height', .Height)
		
			.SaveProperty('ShowNative',     .Treecontainer.lShowNative)
			.SaveProperty('ShowInherited',  .Treecontainer.lShowInherited)
			.SaveProperty('ShowCustom',     .Treecontainer.lShowCustom)
			.SaveProperty('ShowNonDefault', .Treecontainer.lShowNonDefault)
			.SaveProperty('SortFavorites',  .Treecontainer.lSortFavorites)
			.SaveProperty('HighlightFavorites',  .Treecontainer.lHighlightFavorites)
			.SaveProperty('MaxCharacterWidth',  .Treecontainer.nMaxCharacterWidth)
		
			.SaveProperty('Column1.Width', .TreeContainer.opropGrid.Column1.Width)
			.SaveProperty('Column2.Width', .TreeContainer.opropGrid.Column2.Width)
			.SaveProperty('Column3.Width', .TreeContainer.opropGrid.Column3.Width)
		
			Use
		Endwith
		
		
	ENDPROC

	PROCEDURE setdatasession
		Lparameters lnDataSession
		Set Datasession to (lnDataSession)
		
	ENDPROC

	PROCEDURE cmdExit.Click
		Thisform.Release()
		
	ENDPROC

	PROCEDURE Treecontainer.oleTree.KeyPress
		*** ActiveX Control Event ***
		LPARAMETERS keyascii
		Do Case
			Case m.keyascii = 27
				ThisForm.Release()
		Endcase
		
	ENDPROC

ENDDEFINE
